<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace {{invokerPackage}};

{{#operations}}
class {{classname}} {

    function __construct($apiClient) {
        $this->apiClient = $apiClient;
    }

    {{#operation}}
    /**
     * {{{nickname}}}
     *
     * {{{summary}}}
     *
     * @param string[] $params Ассоциативный массив параметров. Может содержать следующие поля:
     *
{{#allParams}}     * '{{paramName}}' ({{dataType}}) {{description}} {{#required}}(required){{/required}}{{^required}}(optional){{/required}}
{{/allParams}}
     *
     * @return {{#returnType}}models\{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */
    public function {{nickname}}($params = []) {
        $resourcePath = "{{path}}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "{{httpMethod}}";
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = '{{#produces}}{{mediaType}}{{#hasMore}}, {{/hasMore}}{{/produces}}';
        if ($_header_accept !== '') {
            $headerParams['Accept'] = $_header_accept;
        }
        $_header_content_type = array({{#consumes}}'{{mediaType}}'{{#hasMore}},{{/hasMore}}{{/consumes}});
        $headerParams['Content-Type'] = count($_header_content_type) > 0 ? $_header_content_type[0] : 'application/json';

        // query params{{#queryParams}}
        if (isset($params['{{paramName}}'])) {
            $queryParams['{{baseName}}'] = $this->apiClient->toQueryValue($params['{{paramName}}']);
        }{{/queryParams}}

        // header params{{#headerParams}}
        if (isset($params['{{paramName}}'])) {
            $headerParams['{{baseName}}'] = $this->apiClient->toHeaderValue($params['{{paramName}}']);
        }{{/headerParams}}

        // path params{{#pathParams}}
        if (isset($params['{{paramName}}'])) {
            $resourcePath = str_replace("{" . "{{baseName}}" . "}", $this->apiClient->toPathValue($params['{{paramName}}']), $resourcePath);
        }{{/pathParams}}

        // form params{{#formParams}}
        if (isset($params['{{paramName}}'])) {
            $formParams['{{baseName}}'] = {{#isFile}}'@' . {{/isFile}}$this->apiClient->toFormValue($params['{{paramName}}']);
        }{{/formParams}}

        // body params{{#bodyParams}}
        $preparedBody = null;
        if (isset($params['{{paramName}}'])) {
            $preparedBody = $params['{{paramName}}'];
        }

        // for HTTP post (form)
        $preparedBody = $preparedBody ?: $formParams;
        {{/bodyParams}}{{^bodyParams}}
        $preparedBody = $formParams;
        {{/bodyParams}}

        if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
            $preparedBody = http_build_query($preparedBody);
        }

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $preparedBody, $headerParams);
        {{#returnType}}
        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, '{{returnType}}');
        return $responseObject;{{/returnType}}
    }
   {{/operation}}
{{newline}}
{{/operations}}
}
